#!/bin/sh
"exec" "`dirname $0`/../ta/venv/bin/python" "$0" "$@";

# Author: Eli Berkowitz
# Email: eliberkowitz@gmail.com
# PYTHON VERSION: 3.6+

# uses ldapsearch to get members of a group, rather than
# the department's weird caching system that frequently breaks

import re
import subprocess
import sys
import sys
from typing import Dict

if len(sys.argv) != 2:
    print('Usage: better-members <group>')
    sys.exit(1)

group = sys.argv[1]


def todict(s: str) -> Dict[str, str]:
    """

    given a string of the form a=3,b=hello,key=value, turn into a
    dictionary with keys from the left of the equal and values on the right
    (and until the comma)

    :param s: string of form key1=value1, key2=value2,...
    :type s: str
    :returns: A (key, value) dictionary extracted from s
    :rtype: {Dict[str, str]}

    **example**:

    >>> s = 'a=3,b=hello,key=value'
    >>> todict(s)
    {'a': 3, 'b': 'hello', 'key': 'value'}

    """
    d = {}
    kvs = s.split(',')
    for kv in kvs:
        if not kv:
            continue

        k, v = kv.split('=')
        d[k] = v

    return d


# get obfuscated group code
o1 = subprocess.Popen(['ldapsearch', '-Q', f'cn={group}'],
                      stdout=subprocess.PIPE)
o2 = subprocess.Popen(['grep', 'member'],
                      stdin=o1.stdout, stdout=subprocess.PIPE)
o1.wait()
output = subprocess.check_output(['awk', '{print $2}'], stdin=o2.stdout)
o2.wait()

group_data = todict(output.decode())

o1 = subprocess.Popen(['ldapsearch', '-Q', '-LLL', '-E',
                      'pr=500/noprompt', f'cn={group_data["CN"]}'],
                      stdout=subprocess.PIPE)
o2 = subprocess.Popen(['grep', 'member: '],
                      stdin=o1.stdout, stdout=subprocess.PIPE)
o1.wait()
output = subprocess.check_output(['awk', '{print $2}'], stdin=o2.stdout)
o2.wait()

members = output.decode().strip().split('\n')
if members == ['']:
    sys.exit(0)

data = [todict(m) for m in members]
unames = [d['CN'] for d in data]
print(' '.join(list(sorted(unames))))
